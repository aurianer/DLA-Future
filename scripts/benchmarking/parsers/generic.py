import re

RE_FLOAT = '\d+(?:\.\d+)?'

def parse_slurm_db(db_filepath):
    '''
    it is generated by
    SLURM_TIME_FORMAT=standard sacct -p -o jobid,jobname,nnodes,submit,state
    e.g.
    25669982|64-cholesky-dlaf|64|2020-09-14T15:44:10|COMPLETED|
    '''
    db = {}
    with open(db_filepath, 'r') as db_file:
        for line in db_file:
            jobid, jobname, nnodes, start_datetime, state = line.split('|')[:-1]
            db[jobid] = {
                    'jobid': jobid,
                    'jobname': jobname,
                    'nodes': int(nnodes),
                    'date': start_datetime,
                    'state': state,
            }
    return db

def parse_report(report_filepath):
    fields = ['jobid', 'jobname', 'nodes']
    data = {k:v for k,v in zip(fields, len(fields)*[None])}

    with open(report_filepath, 'r') as report_file:
        for line in report_file:
            m = re.match('Batch Job Summary Report for Job "([^\"]+)" \((\d+)\)', line)
            if m:
                data['jobname'], data['jobid'] = m.groups()
                continue
            
            m = re.match(r'Username    Account     Partition   NNodes   Energy', line)
            if m:
                next(report_file) # horizontal separator
                data['nodes'] = int(re.split(r'\s+', next(report_file))[3])
                break

    if len(list(filter(lambda x: x is None, data.values()))) > 0:
        res = (-1, "Problem parsing " + report_filepath + ": " + str(data))
    else:
        res = (0, "OK")

    return (res, data)

def parse_cli(cli):
    assert(re.match(r"^srun\s+-n\s*\d+\s+-c\s*\d+\s+.*", cli))
    nranks, cores_per_rank = map(int, cli.split()[2:5:2])
    return (nranks, cores_per_rank)


if __name__ == "__main__":
    print(parse_report('raw_data/slurm-25439266.out'))
    print(parse_report('raw_data/slurm-25543212.out'))

    for cli_example in [
            'srun -n 36 -c 1 /project/csstaff/rasolca/libevs/test_scalapack_pdtrsm -m 10240 -n 5120 -b 128 --rep 5',
            ]:
        print(parse_cli(cli_example))
